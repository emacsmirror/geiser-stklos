;; geiser-stklos.el -- STklos Scheme implementation of the geiser protocols

;; Copyright (C) 2020-2021 Jer√¥nimo Pellegrini

;; Author: Jeronimo Pellegrini <j_p@aleph0.info>
;; Maintainer: Jeronimo Pellegrini <j_p@aleph0.info>
;; URL: https://gitlab.com/emacs-geiser/stklos
;; Keywords: languages, stklos, scheme, geiser
;; Package-Requires: ((emacs "24.4") (geiser-core "1.0"))
;; SPDX-License-Identifier: BSD-3-Clause
;; Version: 1.8

(define-module GEISER

  (export geiser:eval
          geiser:load-file
          geiser:add-to-load-path
          geiser:macroexpand
          geiser:module-completions
          geiser:completions
          geiser:module-exports
          geiser:symbol-documentation
          geiser:autodoc
          geiser:no-values
          geiser:set-log-file)


;; STklos changed made the %procedure-signature public, changing its
;; name to procedure-formals, so we test for both.
(define geiser:procedure-formals #f)
(let ((has-proc? (lambda (p)
                   (with-handler
                    (lambda (x) #f)
                    p))))
  (set! geiser:procedure-formals
    (cond ((has-proc? procedure-formals)    procedure-formals)
          ((has-proc? %procedure-signature) %procedure-signature)
          (else                             (lambda (x) #f)))))


(define geiser-log-file #f)

;; Opens the Geiser log file
(define (geiser:set-log-file name)
  (when (string? name)
    (set! geiser-log-file (open-output-file name))))

;; The variable geiser-log-file may be a port, but it may also
;; be #f when no logging is going on, so this wrapper is used to
;; flush it.
(define (flush-when-port p)
  (when (output-port? p) (flush-output-port p)))

(define (geiser-format port . rest)
  (when (output-port? port)
    (apply format (cons port rest))
    (flush-when-port port)))

;; executes thunk, with all its output (standar and error) redirected
;; to a string.
(define (with-all-output-to-string thunk)
  (let ((out (open-output-string)))
    (with-error-to-port out
                        (lambda ()
                          (with-output-to-port out
                            thunk)))
    (close-output-port out)
    (get-output-string out)))


;; call-with-result wraps output from geiser functions.
;; The result is an assoc list with the keys:
;;
;; - result: the CAR is a list with the values returned
;; - output: the CDR is a string with the output
;;
;; Example:
;;
;; (call-with-result (lambda () (display "OK") 42))
;; =>  ((result "42") (output . "OK"))
;;
;;  (call-with-result (lambda () (display "OK") (values 1 2 3)))
;; =>  ((result "1" "2" "3") (output . "OK"))
;;
(define (call-with-result thunk)
  (let* ((result #void)
         (output #void))
    
    (set! output
          (with-handler (lambda (exn)
                            (with-output-to-string
                              (lambda () (write (error-object-message exn)))))
                        (with-all-output-to-string
                         (lambda ()
                           (call-with-values thunk (lambda v (set! result v)))))))
    
    (set! result
          (cond
           ((list? result)
            (map (lambda (v) (with-all-output-to-string (lambda () (write v)))) result))
           ((eq? result #void)
            (list output))
           (else
            (list (with-all-output-to-string (lambda () (write result)))))))
    
    (let ((out-form
                 `((result ,@result)
                   (output . ,output))))
      (write out-form)
      (geiser-format geiser-log-file "call-with-result response: ~s~%" out-form)
      (flush-when-port geiser-log-file))
    
    (newline)))


;; evaluates form inside a module.
;; the result is in the same format as call-with-result.
;;
;; Examples:
;; 
;; (geiser:eval #f '(begin (display "OK") (values 1 2 3)))
;; => ((result "1" "2" "3") (output . "OK"))
;;
;;
;; (define-module a
;;   (export b)
;;   (define b -2))
;;
;; (geiser:eval 'a 'b)
;; => ((result "-2") (output . ""))
;;
(define (geiser:eval module-name form . rest)
  (geiser-format geiser-log-file "_________________~%")
  (geiser-format geiser-log-file "geiser:eval form: ~s~%" form)
  (flush-when-port geiser-log-file)
  
  ;; All calls start at toplevel
  (let ((module (or (and (symbol? module-name )
			 (find-module module-name))
		    (find-module 'stklos))))
    (let ((thunk (guard
                     (err
                      (else
                       (write `((error (key . ,(error-object-message err)))))))
                   (lambda () (eval form module)))))
      (let ((ret (call-with-result thunk)))
        (geiser-format geiser-log-file "geiser:eval return: ~s~%" ret)
        (flush-when-port geiser-log-file)
        ret))))


;; Load a file in STklos
;;
(define (geiser:load-file file)
  (let* ((file (if (symbol? file) (symbol->string file) file))
         (found-file (geiser-find-file file)))
    (call-with-result
     (lambda ()
       (when found-file
         (load found-file))))))

;; Geiser calls this function to add a string to STklos'
;; load path
(define (geiser:add-to-load-path path)
  (load-path (cons path (load-path))))

;; Geiser will call this procedure when it wants to
;; show the macro-expansion of a form.
(define (geiser:macroexpand form . rest)
  (format "~S" (macro-expand form)))

;; do not use string-index, because the native STklos version
;; is different from that in SRFI-13, and we can't tell in advance
;; what's the correct way to call it...
(define (name-match-with-start? prefix name i)
  (cond ((< (string-length name) (string-length prefix)) #f)
        ((>= i (string-length prefix)) #t)
        ((and (< i (string-length prefix))
              (eq? (string-ref prefix i)
                   (string-ref name i)))
         (name-match-with-start? prefix name (+ 1 i)))
        (else #f)))

(define (name-match? prefix name) (name-match-with-start? prefix name 0))

;; Geiser calls this procedure when it wants to complete
;; a module's name for the user. We check if prefix is
;; the prefix of a known module.
;;
;; Issue: we should be able to complete the names of
;; arbitrary modules, including those which were not
;; loaded yet, but that would be a bit too complex.
(define (geiser:module-completions prefix . rest)
  (filter (lambda (name) (name-match? prefix name))
          (map symbol->string
               (map module-name (all-modules)))))

;; symbol completion. not sure if completing with all the symbols
;; from the current module is OK, but it's a start...
(define (geiser:completions prefix)
  (filter (lambda (name) (name-match? prefix name))
          (map symbol->string
               (module-symbols (current-module)))))

;; used in module-exports...
(define-syntax push!
  (syntax-rules ()
    ((push! el lst)
     (set! lst (cons el lst)))))

;; given a module name (either symbol or string), return a list of
;; symbols exported by the module. This list will be used as an assoc
;; list, and the keys are:
;;
;; - "modules" - the CDR is a list of module names, each one wrapped in a list
;; - "procs" - the CDR is a list of procedure names, each one wrapped in a list
;; - "syntax" - the CDR is a list of macro names, each one wrapped in a list
;; - "vars" - the CDR is a list of variable names, each one wrapped in a list
;;
;; Example:
;;
;; (define-module x
;;   (export p q v s)
;;   (define v 100)
;;   (define (p) 200)
;;   (define (q) 300)
;;   (define-syntax s
;;     (syntax-rules ()
;;       ((s x) (- x)))))
;;
;;
;; (geiser:module-exports 'x)
;; => (list ("modules") ("procs" (p) (q)) ("syntax" (s)) ("vars" (v)))
;;
(define (geiser:module-exports module-name . rest)
  (cond ((string? module-name)
         (geiser:module-exports (string->symbol module-name)))
        ((symbol? module-name)
         (let ((module (find-module  module-name)))
           (let ((exports (module-exports module)))
             (let ((procs '())
                   (syntaxes '())
                   (vars '()))
               (for-each (lambda (name)
                           ;; STklos does not recognize macro names, but we can
                           ;; tell that, if it is exported, and does not have a value,
                           ;; then it is syntax!
                           (let ((obj (symbol-value name module :geiser-stklos--it-is-syntax)))
                             (cond ((procedure? obj)
                                    (push! (list name) procs))
                                   ((eq? obj :geiser-stklos--it-is-syntax)
                                    (push! (list name) syntaxes))
                                   (else
                                    (push! (list name) vars)))))
                         exports)
               `(list ("modules") ("procs" . ,procs) ("syntax" . ,syntaxes) ("vars" . ,vars))))))
        (else '())))


;; formats the signature of a procedure in the format required by Geiser.
;;
;; (define (f a b . c) a)
;; (geiser:procedure-signature 'f 'stklos)
;; =>  (f ("args" (("required" a b)
;;                 ("optional" "...")
;;                 ("key")))
;;        ("module" stklos))
;; 
(define (geiser:procedure-signature name mod-name)
  (let ((sig (list-copy (geiser:procedure-formals (eval name
                                                        (find-module mod-name))))))
    (if sig
        (let ((proper (list? sig)))
          (let ((optional-args (if proper '() '("..."))))
            (when (not proper) (nullify-last-cdr! sig))
            `(,name  ("args" (("required" ,@sig)
                              ("optional" ,@optional-args)
                              ("key")))
                     ("module" ,mod-name))))
        ""))) ;; if there's no signature, don't show anything


;; returns the documentation for a symbol, which includes
;; the docstring for a procedure, and the value for variables.
;;
;; (define (f a b . c) "the documentation for f..." a)
;; (geiser:symbol-documentation 'f 'stklos)
;; => (("signature" f ("args" (("required" a b)
;;                             ("optional" "...")
;;                             ("key"))))
;;     ("docstring" . "A procedure in module GEISER.\nthe documentation for f..."))
;;
;; (define x #(10 20 30))
;; (geiser:symbol-documentation 'x 'stklos)
;; => (("signature" x ("args"))
;;     ("docstring" . "An object in module GEISER.\n\nValue:\n #(10 20 30)"))
;;
(define (geiser:symbol-documentation name . rest)
  (let ((mod-name (if (null? rest)
                      (module-name (current-module))
                      (car rest))))
    ;; "procedure?" tests for primitives OR closures;
    ;; but primitives have no signature data, so we use "closure?"
    (cond ((closure? (eval name (find-module mod-name)))
           (let ((sig (geiser:procedure-signature name mod-name))
                 (doc (%procedure-doc (eval name (find-module mod-name)))))
             (let ((res
             `(("signature" ,name ,(assoc "args" (cdr sig)))
               ("docstring" . ,(string-append "A procedure in module "
                                              (symbol->string mod-name) ".\n"
                                              (if doc doc ""))))))
               (geiser-format geiser-log-file res)
               res)))
          ((bound? name mod-name) ; variable
           `(("signature" ,name ("args"))
             ("docstring" . ,(string-append "An object in module "
                                            (symbol->string mod-name)
                                             ".\n\nValue:\n "
                                             (with-output-to-string
                                               (lambda () (eval `(write ,name)
                                                           (find-module mod-name))))))))
          (else ""))))

;; predicate - returns #t if id is bound in module.
(define (bound? id module)
  (cond ((string? module)
         (bound? id (find-module (string->symbol module))))
        ((symbol? module)
         (let ((flag (gensym "it-is-unbound")))
           (not (eq? (symbol-value id (find-module module) flag)
                     flag))))
        ((module? module)
         (bound? id (module-name module)))
        (else #f))) ;; really?


;; nullify-last-cdr! turns improper lists into proper lists by removing
;; the last element and putting '() in its place.
;;
;; *** The lists MUST BE MUTABLE! (hence the use of
;;     "list-copy" in the examples below ***
;;
;; (define a (list-copy '(1 2 . 3)))
;; (define b (list-copy '(1 2 3)))
;; (nullify-last-cdr! a)
;; (nullify-last-cdr! b)
;; a => (1 2)
;; b => (1 2 3)
(define (nullify-last-cdr! lst)
  (cond ((not (or (list? lst)
                  (pair? lst)))
         (error 'set-last-cdr! "Not a cons cell: ~S" lst))
        ((pair? (cdr lst))
         (nullify-last-cdr! (cdr lst)))
        (else
         (set-cdr! lst '()))))

(define (geiser-build-autodoc name module)
  (let ((mod-name (cond ((string? module) (string->symbol module))
                        ((module? module) (module-name module))
                        ((symbol? module) module))))
    (cond ((not (bound? name mod-name))
           "")
          ((procedure? (eval name (find-module mod-name)))
           (geiser:procedure-signature name mod-name))
          (else ;; it's a variable?
           `(,name  ("value" . ,(eval name (find-module mod-name)))
                    ("module" ,mod-name))))))

;; autodoc receives a list of names, and possibly a module name.
;; it returns a list of documentations for each name:
;;
;; (define (f a c) a)
;; (define (g a b :optional (c 1))
;; (define a #(1 2 3))
;;
;; (geiser:autodoc '(f g a))
;;  =>
;; ((f ("args" (("required" a c)     ("optional")       ("key"))) ("module" stklos))
;;  (g ("args" (("required" . #void) ("optional" "...") ("key"))) ("module" stklos))
;;  (a ("value" . #(1 2 3)) ("module" stklos)))
;;
(define (geiser:autodoc names . rest)
  (cond ((null? names) '())
        ((symbol? names)
         (geiser:autodoc (list names)))
        ((list? names)
         (let ((module (if (null? rest)
                           (current-module)
                           (car rest))))
           (filter list? (map (lambda (n) (geiser-build-autodoc n module)) names))))
        (else ())))

;; The no-values identity
(define (geiser:no-values)
    (values))

(define geiser-stklos-load-paths (make-parameter '("" ".")))

(define (geiser-find-file file . rest)
  (when file
    (let ((paths (geiser-stklos-load-paths)))
      (define (try-find file paths)
        (cond
         ((null? paths) #f)
         ((file-exists? (string-append (car paths) file))
          (string-append (car paths) file))
         (else (try-find file (cdr paths)))))
      (try-find file paths))))

(define (geiser-add-to-load-path directory . rest)
  (let* ((directory (if (symbol? directory)
                        (symbol->string directory)
                        directory))
         (directory (if (not (equal? #\/ (string-ref directory (- (string-length directory)))))
                        (string-append directory "/")
                        directory)))
    (call-with-result
     (lambda ()
       (when (directory-exists? directory)
         (geiser-stklos-load-paths (cons directory (geiser-stklos-load-paths))))))))

(define (geiser-compile-file file . rest)
  #f)

(define (geiser-compile form module . rest)
  (error "STklos does not support compiling regions"))

) ;; END of module GEISER

;; standard boilerplate for loading modules:

(select-module STklos)
(import GEISER)
(provide "geiser")
